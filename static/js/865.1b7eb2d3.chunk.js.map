{"version":3,"file":"static/js/865.1b7eb2d3.chunk.js","mappings":"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","sources":["pages/activities/meditation.js","components/AudioPlayer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport CustomAudioPlayer from '../../components/AudioPlayer';\r\n\r\nconst Meditation = () => {\r\n  const [playlist, setPlaylist] = useState([]);\r\n  const [currentTrack, setCurrentTrack] = useState(null); // For current track display\r\n\r\n  useEffect(() => {\r\n    async function fetchSuggestions() {\r\n      try {\r\n        const response = await fetch('/cs378-project/suggestions.json');\r\n        const data = await response.json();\r\n\r\n        // Search all emotions for the meditation activity\r\n        for (const emotion of Object.values(data)) {\r\n          const meditation = emotion.suggestions.find(s => s.activity === 'meditation');\r\n          if (meditation && meditation.playlist) {\r\n            setPlaylist(meditation.playlist);\r\n            setCurrentTrack(meditation.playlist[0]); // Start with first track\r\n            break;\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to load playlist:', err);\r\n      }\r\n    }\r\n\r\n    fetchSuggestions();\r\n  }, []);\r\n\r\n  const handleTrackChange = (track) => {\r\n    setCurrentTrack(track);\r\n  };\r\n\r\n  return (\r\n    <div className=''>\r\n      <h1>Meditation</h1>\r\n      <p>Pick a sound to meditate to:</p>\r\n\r\n      {currentTrack && (\r\n        <div className=\"activity-display-box\">\r\n        <CustomAudioPlayer \r\n          src={`/cs378-project/${currentTrack.source}`} \r\n          title={currentTrack.title}\r\n        />\r\n        </div>\r\n      )}\r\n\r\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '10px', width: '85vw', margin: '0 auto'}}>\r\n        {playlist.map((track, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleTrackChange(track)}\r\n            className=\"playlist-button\">\r\n            {track.title}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Meditation;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst CustomAudioPlayer = ({ src, title }) => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const audioRef = useRef(null);\r\n\r\n  // Toggle play/pause button\r\n  const togglePlay = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n    } else {\r\n      audioRef.current.play();\r\n    }\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  const updateTime = () => {\r\n    setCurrentTime(audioRef.current.currentTime);\r\n  };\r\n\r\n  const handleLoadedMetadata = () => {\r\n    setDuration(audioRef.current.duration);\r\n  };\r\n\r\n  // Update the progress bar\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (audioRef.current) {\r\n        setCurrentTime(audioRef.current.currentTime);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleSeek = (e) => {\r\n    const newTime = (e.nativeEvent.offsetX / e.target.clientWidth) * duration;\r\n    audioRef.current.currentTime = newTime;\r\n    setCurrentTime(newTime);\r\n  };\r\n\r\n  const handleTrackEnd = () => {\r\n    audioRef.current.currentTime = 0;\r\n    audioRef.current.play();\r\n  };\r\n\r\n  // reset the play/pause button when the song changes\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      audioRef.current.currentTime = 0; \r\n      setIsPlaying(false); \r\n    }\r\n  }, [src]);\r\n\r\n  return (\r\n    <div className=\"audio-player\">\r\n      <h3>{title}</h3>\r\n\r\n      <div className=\"audio-controls\">\r\n        <button onClick={togglePlay} className=\"play-button\">\r\n        {isPlaying ? <span dangerouslySetInnerHTML={{ __html: \"&#x23F8;\" }} /> : <span dangerouslySetInnerHTML={{ __html: \"&#x25B6;\" }} />}\r\n        </button>\r\n\r\n        <div className=\"progress-bar\" onClick={handleSeek}>\r\n          <div\r\n            className=\"progress\"\r\n            style={{ width: `${(currentTime / duration) * 100}%` }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"timestamps\">\r\n          <span>{formatTime(currentTime)}</span> / <span>{formatTime(duration)}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <audio\r\n        ref={audioRef}\r\n        src={src}\r\n        onTimeUpdate={updateTime}\r\n        onLoadedMetadata={handleLoadedMetadata}\r\n        onEnded={handleTrackEnd} // Handle track ending\r\n        loop={false} // Disable default loop to handle looping manually\r\n      >\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Format time in mm:ss\r\nconst formatTime = (time) => {\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = Math.floor(time % 60);\r\n  return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n};\r\n\r\nexport default CustomAudioPlayer;\r\n"],"names":["Meditation","playlist","setPlaylist","useState","currentTrack","setCurrentTrack","useEffect","async","response","fetch","data","json","emotion","Object","values","meditation","suggestions","find","s","activity","err","console","error","fetchSuggestions","_jsxs","className","children","_jsx","CustomAudioPlayer","src","source","title","style","display","gridTemplateColumns","gap","width","margin","map","track","index","onClick","handleTrackChange","formatTime","time","minutes","Math","floor","seconds","_ref","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","audioRef","useRef","interval","setInterval","current","clearInterval","togglePlay","pause","play","dangerouslySetInnerHTML","__html","e","newTime","nativeEvent","offsetX","target","clientWidth","ref","onTimeUpdate","updateTime","onLoadedMetadata","handleLoadedMetadata","onEnded","handleTrackEnd","loop"],"sourceRoot":""}